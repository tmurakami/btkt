import org.gradle.internal.os.OperatingSystem

apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.moowork.node'
apply plugin: 'maven-publish'

kotlin {
    targets {
        all {
            compilations.all {
                tasks[compileKotlinTaskName].kotlinOptions {
                    allWarningsAsErrors = true
                }
            }
            mavenPublication {
                pom {
                    name = 'Bt.kt'
                    description = 'A bit twiddling library for Kotlin'
                    url = 'https://github.com/tmurakami/btkt'
                    inceptionYear = '2018'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'tmurakami'
                            name = 'Tsuyoshi Murakami'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/tmurakami/btkt.git'
                        developerConnection = 'scm:git:ssh://github.com/tmurakami/btkt.git'
                        url = 'https://github.com/tmurakami/btkt'
                    }
                }
            }
        }
        fromPreset(presets.js, 'js') {
            compilations.main {
                tasks[compileKotlinTaskName].kotlinOptions {
                    sourceMap = true
                    sourceMapEmbedSources = 'always'
                    moduleKind = 'umd'
                }
            }
            compilations.test {
                tasks[compileKotlinTaskName].kotlinOptions.moduleKind = 'commonjs'
            }
        }
        fromPreset(presets.jvm, 'jvm') {
            compilations.main {
                tasks[compileKotlinTaskName].kotlinOptions {
                    freeCompilerArgs += ['-Xno-param-assertions']
                }
            }
        }
        def candidates = new HashMap<OperatingSystem, String>()
        candidates[OperatingSystem.LINUX] = 'linuxX64'
        candidates[OperatingSystem.MAC_OS] = 'macosX64'
        candidates[OperatingSystem.WINDOWS] = 'mingwX64'
        def nativeTarget = candidates.remove(OperatingSystem.current()).with {
            fromPreset(presets[it], it) {
                compilations.all {
                    kotlinSourceSets.each {
                        it.kotlin.srcDirs = ["src/native${name.capitalize()}/kotlin"]
                    }
                }
            }
        }
        if (project.hasProperty('morePlatforms')) {
            (candidates.values() + ['androidNativeArm32', 'androidNativeArm64']).each {
                fromPreset(presets[it], it) {
                    compilations.all {
                        nativeTarget.compilations[name].kotlinSourceSets.each { source it }
                    }
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}

node {
    version = versions.node
    download = true
}
// TODO https://github.com/srs/gradle-node-plugin/issues/301
repositories.withType(IvyArtifactRepository) { metadataSources { artifact() } }

task populateNodeModules(type: Copy, dependsOn: compileKotlinJs) {
    from compileKotlinJs.destinationDir
    doFirst {
        configurations.jsTestRuntimeClasspath.each {
            from zipTree(it.absolutePath).matching { include '*.js' }
        }
    }
    into "$buildDir/node_modules"
}

task installMocha(type: NpmTask) {
    inputs.file 'package-lock.json'
    outputs.dir 'node_modules/mocha'
    args = ['install', 'mocha']
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlinJs, populateNodeModules, installMocha]) {
    inputs.files compileKotlinJs, compileTestKotlinJs, populateNodeModules, installMocha
    outputs.upToDateWhen { true }
    script = file('node_modules/mocha/bin/mocha')
    args = [compileTestKotlinJs.outputFile]
}
jsTest.dependsOn runMocha
