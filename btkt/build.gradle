apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'maven-publish'

kotlin {
    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
            }
        }
        mavenPublication {
            pom {
                name = 'BT.kt'
                description = 'A Kotlin library that provides extensions for bit-twiddling'
                url = 'https://github.com/tmurakami/btkt'
                inceptionYear = '2018'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'tmurakami'
                        name = 'Tsuyoshi Murakami'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/tmurakami/btkt.git'
                    developerConnection = 'scm:git:ssh://github.com/tmurakami/btkt.git'
                    url = 'https://github.com/tmurakami/btkt'
                }
            }
        }
    }
    js {
        nodejs()
        browser()
        compilations.main {
            kotlinOptions {
                sourceMap = true
                sourceMapEmbedSources = 'always'
                moduleKind = 'umd'
            }
        }
        compilations.test {
            kotlinOptions {
                sourceMap = true
                moduleKind = 'commonjs'
            }
        }
    }
    jvm {
        compilations.main {
            kotlinOptions {
                freeCompilerArgs += ['-Xno-param-assertions']
            }
        }
    }
    def host = org.jetbrains.kotlin.konan.target.HostManager.host
    def nativeTarget = presets.find { it.properties.konanTarget == host }.with {
        targetFromPreset(it) {
            mavenPublication {
                artifactId = "${project.name}-${konanTarget.name}"
            }
            compilations.all {
                kotlinSourceSets.each {
                    it.kotlin.srcDirs = ["src/native${name.capitalize()}/kotlin"]
                }
            }
        }
    }
    if ((System.env.CI ?: 'false').toBoolean()) {
        presets.matching { it.hasProperty('konanTarget') && it.konanTarget != host }.all {
            targetFromPreset(it) {
                mavenPublication {
                    artifactId = "${project.name}-${konanTarget.name}"
                }
                compilations.all {
                    nativeTarget.compilations[name].kotlinSourceSets.each { source it }
                }
            }
        }
    }
    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
        commonMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jsMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
        jvmMain {
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
    }
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.github.shyiko:ktlint:${versions.ktlint}"
}

task ktlint(type: JavaExec, group: 'verification') {
    inputs.files fileTree(dir: 'src', include: '**/*.kt')
    outputs.dir 'src'
    description = 'Check Kotlin code style.'
    classpath = configurations.ktlint
    main = 'com.github.shyiko.ktlint.Main'
    args 'src/**/*.kt'
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: 'formatting') {
    inputs.files fileTree(dir: 'src', include: '**/*.kt')
    outputs.dir 'src'
    description = 'Fix Kotlin code style deviations.'
    classpath = configurations.ktlint
    main = 'com.github.shyiko.ktlint.Main'
    args '-F', 'src/**/*.kt'
}

publishing {
    repositories {
        maven {
            credentials {
                username 'tmurakami'
                password System.env.BINTRAY_API_KEY
            }
            url "https://api.bintray.com/maven/tmurakami/maven/${project.name}/;publish=1"
        }
    }
}
